{"version":3,"sources":["components/Card.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","id","className","draggable","onDragStart","event","target","dataTransfer","setData","setTimeout","classList","add","onDragOver","stopPropagation","onDragEnd","remove","children","Board","onDrop","preventDefault","card_id","getData","card","document","getElementById","style","display","appendChild","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAoCeA,MAlCf,SAAcC,GAoBb,OACC,yBACCC,GAAID,EAAMC,GACVC,UAAWF,EAAME,UACjBC,UAAWH,EAAMG,UACjBC,YAvBgB,SAAAC,GACjB,IAAMC,EAAUD,EAAMC,OAEtBD,EAAME,aAAaC,QAAQ,UAAWF,EAAOL,IAE7CQ,YAAW,WACVH,EAAOI,UAAUC,IAAI,iBACnB,IAiBFC,WAde,SAAAP,GAChBA,EAAMQ,mBAcLC,UAZc,SAAAT,GACfA,EAAMC,OAAOI,UAAUK,OAAO,iBAa5Bf,EAAMgB,WCHKC,MA1Bf,SAAejB,GAcd,OACC,yBACCC,GAAMD,EAAMC,GACZiB,OAhBW,SAAAb,GACZA,EAAMc,iBACN,IAAMC,EAAUf,EAAME,aAAac,QAAQ,WAErCC,EAAMC,SAASC,eAAeJ,GACpCE,EAAKG,MAAMC,QAAU,QAErBrB,EAAMC,OAAOqB,YAAYL,IAUxBV,WAPe,SAAAP,GAChBA,EAAMc,kBAOLjB,UAAWF,EAAME,WAEhBF,EAAMgB,WCCKY,MApBf,WACE,OACE,yBAAK1B,UAAU,OACb,0BAAMA,UAAU,WACd,kBAAC,EAAD,CAAOD,GAAG,UAAUC,UAAU,SAC5B,kBAAC,EAAD,CAAMD,GAAG,SAASC,UAAU,OAAOC,UAAU,QAC3C,uCAIJ,kBAAC,EAAD,CAAOF,GAAG,UAAUC,UAAU,SAC5B,kBAAC,EAAD,CAAMD,GAAG,SAASC,UAAU,OAAOC,UAAU,QAC3C,0CCJQ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASC,eAAe,SD6H3C,kBAAmBY,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c7209a5e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Card(props) {\r\n\r\n\tconst dragStart = event =>{\r\n\t\tconst target =  event.target;\r\n\r\n\t\tevent.dataTransfer.setData('card_id', target.id);\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\ttarget.classList.add('moving-card')\r\n\t\t}, 0);\r\n\t}\r\n\r\n\tconst dragOver = event =>{\r\n\t\tevent.stopPropagation();\r\n\t}\r\n\tconst dragEnd = event =>{\r\n\t\tevent.target.classList.remove('moving-card')\r\n\t\t// event.target.element.removeProperty('display')\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tid={props.id}\r\n\t\t\tclassName={props.className}\r\n\t\t\tdraggable={props.draggable}\r\n\t\t\tonDragStart={dragStart}\r\n\t\t\tonDragOver={dragOver}\r\n\t\t\tonDragEnd={dragEnd}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\n\r\nfunction Board(props) {\r\n\tconst drop = event => {\r\n\t\tevent.preventDefault();\r\n\t\tconst card_id = event.dataTransfer.getData('card_id');\r\n\r\n\t\tconst card =document.getElementById(card_id);\r\n\t\tcard.style.display = 'block';\r\n\r\n\t\tevent.target.appendChild(card);\r\n\t}\r\n\r\n\tconst dragOver = event => {\r\n\t\tevent.preventDefault();\r\n\t}\r\n\treturn (\r\n\t\t<div\r\n\t\t\tid = {props.id}\r\n\t\t\tonDrop = {drop}\r\n\t\t\tonDragOver = {dragOver}\r\n\t\t\tclassName={props.className}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Board\r\n","import React from 'react';\nimport Card from './components/Card'\nimport Board from './components/Board'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main className=\"flexbox\">\n        <Board id=\"board-1\" className=\"board\">\n          <Card id=\"card-1\" className=\"card\" draggable=\"true\">\n            <p>Card 1</p>\n          </Card>\n        </Board>\n\n        <Board id=\"board-2\" className=\"board\">\n          <Card id=\"card-2\" className=\"card\" draggable=\"true\">\n            <p>Card 2</p>\n          </Card>\n        </Board>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}